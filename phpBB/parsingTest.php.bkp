<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
	<title></title>
	<style type="text/css">
		body{
			white-space:pre;
		}
	</style>
</head>
<body>
<?php
	
	// $a = array();
	// $b = 1;
	// $c = &$a;
	// $d = &$b;
	// $e;
	
	// echo "\n\n";
	// var_dump($a, $b, $c, $d);
	
	// $a[] = &$d;
	
	// echo "\n\n";
	// var_dump($a, $b, $c, $d);
	// end($a);
	// $e = &$a[key($a)];
	// unset($a[key($a)]);
	
	// $e++;
	// echo "\n\n";
	// var_dump($a, $b, $c, $d, $e);
	
	
	// exit;


	$string = '[/abc][abc=aij] [/ubc][ubc][ab]a [abc="uij]f\"fu"] [/abc][/ubc][abc param1="it is \"val1\"" param2="it is \"val2\"" ] [/ubc][/abc][/ab]b [abc][/abc] c[/ubc][ubc]';
	
	// $BBCode_tags = array('abc', 'cbc', 'dbc');
	$BBCode_tags = array('cbc');
	
	
// Not so good attempt to try to find the BBCode tags in the string
// DISCARDED: There's no guarantee that it will follow the tree-like way of the BBCode.

	preg_match_all('%\[abc.*?\[/abc\]%', $string, $string_match);

	// var_dump($string, $string_match);
	?>
<?php
	// Trying to find all the BBCode tags for the BBCode [abc].
	// The idea seems to be viable.
	$posInit = array();
	$posInit[] = strpos($string, '[abc');
	$posInit[] = strpos($string, '[abc', $posInit[0] + 1);
	// $posInit[] = strpos($string, '[abc', $posInit[1] + 1);

	// var_dump($posInit);
	
	// After knowing where the start tags are, try to find the closing tags for each tag
	// Seems to be working
	$posEnd = array();
	$posEnd[] = strpos($string, '[/abc]', $posInit[1] + 1);
	$posEnd[] = strpos($string, '[/abc]', $posEnd[0] + 1);
	// $posEnd[] = strpos($string, '[/abc]', $posInit[1] + 1);
	
	
	// var_dump(substr($string, $posInit[0], $posEnd[1] - $posInit[0] + strlen('[/abc]')));
	// var_dump(substr($string, $posInit[1], $posEnd[0] - $posInit[1] + strlen('[/abc]')));
	
	?>
<?php
	
	// Find and register all what's inside the tag itself (Attempt1)
	
	// preg_match('%\[abc(?:=(?:"([^"]*(?:\\\\.[^"\\\\]*)*)"|([^"\\\\][^]]+)))?\]%', $string, $parametersFound);
	
	// var_dump($parametersFound);
	
	?>
<?php
	
	// Find and register all what's inside the tag itself (Attempt2)
	
	$subject = substr($string, $posInit[1], $posEnd[0] - $posInit[1] + strlen('[/abc]'));
	
	// $callback_replace = preg_replace_callback('%\[([A-z-][A-z0-9-]*)' .
	// '(?:' . 
	// '(?:=(?:'.
	// '"([^"]*(?:\\\\.[^"\\\\]*)*)"'.
	// '|'.
	// '([^"\\\\][^]]+)))'.
	// '|'.
	// '((?:\s+(?:[A-z][A-z0-9]+)=(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"))+)\s*'.
	// ')?'.
	// '\]%',
			// function ($matches){
				// $returner = '['. $matches[1] .' ';
				
				// if(isset($matches[2])){
					// $returner .= 'default="' . str_replace('\"', '&quot;',$matches[2]) . '"';
				// }elseif(isset($matches[3])){
					// $returner .= 'default="' . $matches[3] . '"';
				// }elseif(isset($matches[4])){
					// $returner .= $matches[4];
				// }
				// $returner .= '"]';
				// // var_dump($returner);
				// return $returner;
			// }, $string);
	
	
	// var_dump($callback_replace);
	
	?>	
	Different try
	reason:
	The previous one was not giving the position of the matches, 2 scans were needed. This should solve that.
	
<?php
	
	$regexedBBCode = implode('|', $BBCode_tags);
	
	function parseInnerParameters($parametersString){
		preg_match_all(
		'%([A-z][A-z0-9]+)=(?:"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)")%', $parametersString, $parametersMatch, PREG_SET_ORDER);
		
		$parameters = array();
		
		foreach($parametersMatch AS $parameter){			
			$parameters[$parameter[1]] = str_replace('\"', '&quot;', $parameter[2]);
		}
		
		return $parameters;
	}
	
	
	preg_match_all(
	'%'.
	'\[('.$regexedBBCode.')' .
	'(?:' . 
	'(?:=(?:'.
	'"([^"]*(?:\\\\.[^"\\\\]*)*)"'.
	'|'.
	'([^"\\\\][^]]+)))'.
	'|'.
	'((?:\s+(?:[A-z][A-z0-9]+)=(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"))+)\s*'.
	')?'.
	'\]()'.
	'|'.
	'\[/('.$regexedBBCode.')\]()'.
	'%',$string, $matched, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);
	
	// var_dump($matched);
	
	$orderedTags = array();
	
	$tagsKind = array();
	
	foreach($matched AS $match){
		if (isset($match[6][0])){
			if(isset($tagsKind[$match[6][0]]['startingTags'])){
				// $orderedTags[] = array(	'name' => $match[6][0],
										// 'type' => 'closing_tag');
				$tagsKind[$match[6][0]]['endingTags'][] = array('name' => $match[6][0],
																'start_position' => $match[6][1],
																'end_position' => $match[7][1]);
			}
		}elseif (isset($match[1][0]) && $match[1][0] != ""){
			$tag = array();
			$tag['name'] = $match[1][0];
			$tag['start_position'] = $match[1][1];
			$tag['end_position'] = $match[5][1];
			
			// var_dump($match[1][0] . " at position: " . $match[1][1]);
			
			// Only one of these will ever match
			// var_dump($match);
			if ($match[4][1] > -1){
				// multiple parameters
				$tag['parameters'] = parseInnerParameters($match[4][0]);
			}elseif ($match[3][1] > -1){
				// 1 parameter bounded by the end of the start tag
				$tag['parameters'] = $match[3][0];
			}elseif ($match[2][1] > -1){
				// 1 parameter bounded by quotes
				$tag['parameters'] = str_replace('\"', '&quot;', $match[2][0]);
			}
			
			// $orderedTags[] = array(	'name' => $match[1][0],
									// 'type' => 'opening_tag');
			$tagsKind[$tag['name']]['startingTags'][] = $tag;
		
		}
	}
	
	// var_dump($orderedTags);
	// echo "\n\n\n";
	// var_dump($endTags);
	// echo "\n\n\n";
	// var_dump($tagsKind);
	
	
	// $abc = array(1, 2, 3, 4);
	
	// var_dump(current($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// // var_dump(reset($abc));
	// var_dump(prev($abc));
	// var_dump(end($abc));
	// var_dump(prev($abc));
	// unset($abc[key($abc)]);
	// var_dump(prev($abc));
	// var_dump(next($abc));
	// var_dump(end($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// var_dump(end($abc));
	// var_dump(reset($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// var_dump(next($abc));
	// var_dump(end($abc));
	
	
	$tagsTree;
	
	$tagsKinds = $tagsKind;
	
	$BBCodeTree = array();
	
	$BBCodeTagMatch = array();
	
	foreach ($tagsKind as $BBCodeName => $data){
		
		echo "\n\n\n";
		
		var_dump($data);
		
		while ($data['startingTags'] != array() && $data['endingTags'] != array()){
			// There's, at least, one possible
			
			// Got a closing tag!
			$endingTag = array_shift($data['endingTags']);
			
			reset($data['startingTags']);
			
			// // Find an appropriate opening tag
			// while(	isset($data['startingTags'][key($data['startingTags']) + 1]) &&
					// $data['startingTags'][key($data['startingTags']) + 1]['end_position'] < $endingTag['start_position']){
				// // var_dump(key($data['startingTags']));
				// next($data['startingTags']);
			// }
			// Find an appropriate opening tag
			while(	next($data['startingTags']) !== false &&
					current($data['startingTags'])['end_position'] < $endingTag['start_position']){
				// var_dump(key($data['startingTags']));
				// next($data['startingTags']);
			}
			
			// The test showed that the next element is beyond what I'm looking for, so the previous is the one I want
			prev($data['startingTags']);
			
			var_dump(current($data['startingTags']));
			
			if(current($data['startingTags']) === false){
				// If I go beyond the top limits of the array. The only way to get back is by using end(), prev() will not work.
				end($data['startingTags']);
			}
			
			var_dump(current($data['startingTags']));
			
			if(current($data['startingTags']) !== false){
				
				// K'ay, this is a match for that closing tag
				$BBCodeTagMatch[$BBCodeName][] = array(
												'start_tag' => current($data['startingTags']),
												'end_tag' => $endingTag
											);
				
				unset($data['startingTags'][key($data['startingTags'])]);
				
				// $data['startingTags'] = array_values($data['startingTags']);
			}else{
				// Oh dear... no match for this closing tag...
				// Malformed BBcode... I don't care, I'll see what I can do with the rest, anyway
				// continue;
			}
		}
	}
	
	echo "\n\n\n";
	var_dump($BBCodeTagMatch);
	
	// Abandoned, there must be a better way.
	// function buildTree($position, &$originalArray, &$arraySize, &$returnPosition){
		
		// if($position === $arraySize){
			// return array();
		// }
		
		// if($originalArray[$position]['type'] == 'opening_tag'){
			// return array(
						// 'name' => $originalArray[$position]['name'],
						// 'children' => buildTree($position + 1, $originalArray, $arraySize, $returnedPosition),
					// );
			
		// }
		
		// if($originalArray[$position]['type'] == 'closing_tag'){
			// return array();
		// }
		
		
	// }
	
	
	// Abandoned, there must be a better way.
	
// function buildTree(array &$elements, array &$elementsLeft) {
	// $branch = array();

	// while($elements != array()){
		// if(current($elements)['type'] == 'opening_tag'){
			// $branch['name'] = current($elements)['name'];
			// next($elements);
			// $children = buildTree($elements, $returningElements);			
			// if ($children) {
				// $element['children'] = $children;
			// }
		// }
		// $branch[$element['id']] = $element;
		// unset($elements[0]);
	// }
	// return $branch;
// }
	
	// $elements = $orderedTags;
	
	// $BBCode_tree = buildTree($elements);
	
	
	// echo "\n\n\n";
	// var_dump($BBCode_tree);
	
	
	$BBCodeTree = array();
	
	// function buildTree(&$BBCodeTree, &$BBCodeOrderedTagList){
		
		$BBCodeTree = array();
		
		// $BBCodeTree[] = 'oi';
		
		// ksort($BBCodeOrderedTagList);
		
		// echo "\n\n\n";
		// var_dump($BBCodeOrderedTagList);
		// while(($startingElement = reset($BBCodeOrderedTagList)) !== false){
			
			// unset($BBCodeOrderedTagList[key($BBCodeOrderedTagList)]);
			
			// if(reset($BBCodeOrderedTagList) === false){
				// $BBCodeTree = array($startingElement);
				// break;
			// }
			
			// $children = array();
			
			// $endFind = $startingElement['end_tag']['end_position'];
			
			// do{
				// if(current($BBCodeOrderedTagList)['start_tag']['start_position'] < $endFind){
					// if(current($BBCodeOrderedTagList)['end_tag']['end_position'] < $endFind){
						// // Tag is inside this1. So this tag is part of its children
						
						// $children[key($BBCodeOrderedTagList)] = &$BBCodeOrderedTagList[key($BBCodeOrderedTagList)];
					// }else{
						// // Bad nesting. This tag is meant to dissapear from this world! Well, not really... Just read it as text.
						// var_dump('bad nesting ' . key($BBCodeOrderedTagList));
						// unset($BBCodeOrderedTagList[key($BBCodeOrderedTagList)]);
					// }
				// }else if(current($BBCodeOrderedTagList)['start_tag']['start_position'] > $endFind){
					// // Close previous tag here. There are no more children.
					
					// $startingElement['children'] = array();
					// $buildChildren = array();
					// // var_dump($children !== array());
					// if($children !== array()){
						// // var_dump($children);
						// // $buildChildren = array();
						// buildTree($startingElement['children'], $children);
					// }
					
					// foreach($children AS $childKey => $child){
						// // remove the child from the flat list
						// $BBCodeOrderedTagList[$childKey] = NULL;
						
						
			// var_dump("terminated", $tagStack);
			
			// $popedElement;
			
			// if(($popedElement = array_pop($tagStack)) === NULL){
				// // Empty stack
				
				// $nextElement = next($BBCodeOrderedTagList);
				
				
				// if($nextElement !== false){
					// $BBCodeTree[] = $currentParent;
					
					// $currentParent = $nextElement;
				// }else{
					
					// break;
				// }
			// }else{
				
				// $currentParent = $popedElement;
				
				// $children = array();
			// }
			
			// $BBCodeTree[] = $currentParent;
			// var_dump($currentParent);
			
					// }
					
					// $BBCodeTree[] = $startingElement;
					// var_dump($BBCodeTree);
					
					// break;
				// }
				
			// }while(next($BBCodeOrderedTagList) !== false);
		// }
	// }
	
		
	
	?>
</body>
</html>
